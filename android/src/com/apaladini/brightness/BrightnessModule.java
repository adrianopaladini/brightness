/**
 * This file was auto-generated by the Titanium Module SDK helper for Android
 * Appcelerator Titanium Mobile
 * Copyright (c) 2009-2013 by Appcelerator, Inc. All Rights Reserved.
 * Licensed under the terms of the Apache Public License
 * Please see the LICENSE included with this distribution for details.
 *
 */
package com.apaladini.brightness;

import android.os.Handler;
import android.os.Message;
import android.view.Window;
import android.view.WindowManager;
import android.content.ContentResolver;
import android.provider.Settings;
import android.provider.Settings.SettingNotFoundException;

import org.appcelerator.kroll.KrollModule;
import org.appcelerator.kroll.annotations.Kroll;
import org.appcelerator.titanium.TiApplication;
import org.appcelerator.kroll.common.AsyncResult;
import org.appcelerator.kroll.common.Log;
import org.appcelerator.kroll.common.TiMessenger;


@Kroll.module(name="Brightness", id="com.apaladini.brightness")
public class BrightnessModule extends KrollModule
{

	// Standard Debugging variables
	private static final String TAG = "BrightnessModule";
	private static final int MSG_BRIGHT_LEVEL = 53601015;
	private float VAL_BRIGHT_LEVEL = 0;
	
	public BrightnessModule()
	{
		super();
	}

	@Kroll.onAppCreate
	public static void onAppCreate(TiApplication app)
	{
		Log.d(TAG, "Start sucessfully");
	}

	@Kroll.method @Kroll.getProperty
	public float getWindowBrightLevel()
	{
		Window win = TiApplication.getAppCurrentActivity().getWindow();
		WindowManager.LayoutParams lp = win.getAttributes();
		float val = lp.screenBrightness;
		if(val==-1){
			return getSystemBrightLevel();
		}else{
			return val;
		}
	}
	
	@Kroll.method @Kroll.getProperty
	public float getSystemBrightLevel()
	{
		try {
			ContentResolver cR = getActivity().getContentResolver();
			int bright = Settings.System.getInt(cR, Settings.System.SCREEN_BRIGHTNESS);
			return bright/(float)255;
		} catch (SettingNotFoundException e) {
			return -1;
		}
	}
	
	private final Handler handler = new Handler(TiMessenger.getMainMessenger().getLooper(), new Handler.Callback ()
	{
	    public boolean handleMessage(Message msg)
	    {
	        switch (msg.what) {
	            case MSG_BRIGHT_LEVEL: {
	                AsyncResult result = (AsyncResult) msg.obj;
	                handleBrightLevel();
	                result.setResult(null);
	                return true;
	            }
	        }
	        return false;
	    }
	});

	private void handleBrightLevel()
	{
	    Window win = TiApplication.getAppCurrentActivity().getWindow();
		WindowManager.LayoutParams lp = win.getAttributes();
		lp.screenBrightness = VAL_BRIGHT_LEVEL;
		win.setAttributes(lp);	
	}

	@Kroll.method @Kroll.setProperty
	public void setSystemBrightLevel(float value) {
		try{
			int intValue = (int)(value*255);
			ContentResolver cR = getActivity().getContentResolver();
			Settings.System.putInt(cR, Settings.System.SCREEN_BRIGHTNESS_MODE, Settings.System.SCREEN_BRIGHTNESS_MODE_MANUAL);
			Settings.System.putInt(cR, Settings.System.SCREEN_BRIGHTNESS, intValue );
			setWindowBrightLevel(value);
			Log.d(TAG, "val:" + intValue );
		}catch(Exception e) {
			Log.d(TAG, "The App has not permission to write on system settings.");
		}
	}

	@Kroll.method @Kroll.setProperty
	public void setWindowBrightLevel(float value) {
		VAL_BRIGHT_LEVEL = value;
		if (!TiApplication.isUIThread()) {
            TiMessenger.sendBlockingMainMessage(handler.obtainMessage(MSG_BRIGHT_LEVEL));
        } else {
            handleBrightLevel();
        }
	}

}

